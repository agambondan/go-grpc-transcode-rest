package insecure

import (
	"crypto/tls"
	"crypto/x509"
	"log"
)

const certPEM = `-----BEGIN CERTIFICATE REQUEST-----
MIIEvjCCAqYCAQAweTELMAkGA1UEBhMCSUQxEDAOBgNVBAgMB0pha2FydGExEDAO
BgNVBAcMB0pha2FydGExITAfBgNVBAoMGEludGVybmV0IFdpZGdpdHMgUHR5IEx0
ZDEjMCEGCSqGSIb3DQEJARYUYWdhbXdvcmsyOEBnbWFpbC5jb20wggIiMA0GCSqG
SIb3DQEBAQUAA4ICDwAwggIKAoICAQDoGIGduINmA9Ut9t5tqIDJ7vs9dNsYjGz4
+qhZSo4tzjRXsEtNDxNhQ3Tf7Lo6WWCcE1zhbXlFtOOLp0cmr7i4BsBb5jj1WTkC
A/E71dKRMNiohsNdmMM+6qrAzqITcRjE9DhPikOpVQJyL4BGR6xTat6LGRHXoAFZ
oWa+81K92Y9g8lTOOn4KbId9j/5yuyT2pm1EZNJVlzrfaegCjX02uLOKmfAlyirM
qu582K2ofVFXhJF92qD5fPxkw9G2P/I5bAo6rIDGNPx9mT6YmJVLMELt4RM9aO7h
HS227ZwDjsa0/WH7/hrgWRZAC+MpSeUoMSDM9rWv+RKKuQK4zdApqVaI874F2Q3D
mNP7Oo9CB8pG6jmQUnKalualufxYoV0pCkl3v3p1iPqEzXacDdXon6Ns/IHabtqD
pL4WRk4u9oZlBu3qvbqrGfHGWhx2tcSJG4z7QjCo8EPCQKE6io5SbQ8NmDRvoWKj
GkoLF3BUV5B7f7XJctgYHEcXPOTE82HgzZ6lYMzaiHUvyZYTv77T9c5O2UWJ2lnG
UwtOfOnuKDZ44cLoYxlQ6MvVwFj25u3GMIon6eusFTexnP5xlYIGKQ2OJGVEX1pp
kvvwxtsyZ3WYFQkphQeDu2jrIIzan6wKid1qRHSAgIwfb+aiY2xJnThOSS98SUJt
a1s8EZ9kpwIDAQABoAAwDQYJKoZIhvcNAQELBQADggIBAMPMewl4eJe14cefXM/i
hJRais4ICEkbLFR6m/0yfVSsDKn2+i9rjI6CDlw+YYYBRUrVM41uQpuBErl8CbeU
8ZmuwfDr24NQm3yGoMRo8wPgr38Vjyng6ExDU8gAQ79dlY0xQBW28cHFsbMcPsNF
BHfVb/FmCyZYYcZ4nBgCgSJae5hLytcGEdI6TWmHEAjpXlpZsnB0uavhUrgOYyl+
yWJ7fgUKRBCYFPOfXaGfQ1bjZbORP+QeHufyiFGBJGqgJoJVwegAMlPzxhoK2hJo
ntYZMbDD4m/CSlWcbvIgfO08DjneyzeWvXmAv6VU1Vgl54p0kvh602TkFxgwyPSK
9d8iWBj76QF4jPhN8RAZBrowiPoordMyVznxsNaxYz1Otp5CEiJHJbXmk93CrwIl
cJpf/iEemX7uBt+vQj09AATQBhywLmnJbS+EzlsIFg6A5FL+3vg0jvLrXh5ROgIn
oA9P0PXlA4WIio+3o77rBR5TouN5UqTYwnCff9hXAlCkjr1mLHSZEl5atSCifN/d
XzSHCn3R/+I0gMs83De+oaMJcxOiY/qNdm9YNIWgbEMchBtAMGl9Cq6W1Nme5fWe
BkFNl4a47Ma3hsnPDXwDNGWLmrVemUM/awxaqkCWv5PPW6edwhDqt2Koy5CXFOp3
ny1jAODHOwsqIwmtrPt0AlLf
-----END CERTIFICATE REQUEST-----
`

const keyPEM = `-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: DES-EDE3-CBC,A6E9F3EEFDD42850

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
-----END RSA PRIVATE KEY-----
`

var (
	Cert     tls.Certificate
	CertPool *x509.CertPool
)

func init() {
	// it shows your line code while error
	log.SetFlags(log.LstdFlags | log.Lshortfile)
	var err error
	Cert, err = tls.X509KeyPair([]byte(certPEM), []byte(keyPEM))
	if err != nil {
		log.Fatalln("Failed to parse key pair:", err)
	}
	Cert.Leaf, err = x509.ParseCertificate(Cert.Certificate[0])
	if err != nil {
		log.Fatalln("Failed to parse certificate:", err)
	}
	CertPool = x509.NewCertPool()
	CertPool.AddCert(Cert.Leaf)
}
